// Code generated by protoc-gen-go. DO NOT EDIT.
// source: demo.proto

// 声明包名, Python中使用时可以省略不写(PS:我还要再Go中使用,所以留在这里了)

package demo

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// 消息message是用来定义数据的, 等号后面的是字段编号
// 消息定义中的每个字段都有唯一的编号,这些字段编号用于以消息二进制格式标识字段
// 类似于Python中定义一个类, 类似于Golang中定义一个结构体
type Request struct {
	Cid                  int64    `protobuf:"varint,1,opt,name=Cid,proto3" json:"Cid,omitempty"`
	ReqMsg               string   `protobuf:"bytes,2,opt,name=ReqMsg,proto3" json:"ReqMsg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca53982754088a9d, []int{0}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *Request) GetReqMsg() string {
	if m != nil {
		return m.ReqMsg
	}
	return ""
}

type Response struct {
	Sid                  int64    `protobuf:"varint,1,opt,name=Sid,proto3" json:"Sid,omitempty"`
	RespMsg              string   `protobuf:"bytes,2,opt,name=RespMsg,proto3" json:"RespMsg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca53982754088a9d, []int{1}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetSid() int64 {
	if m != nil {
		return m.Sid
	}
	return 0
}

func (m *Response) GetRespMsg() string {
	if m != nil {
		return m.RespMsg
	}
	return ""
}

func init() {
	proto.RegisterType((*Request)(nil), "demo.Request")
	proto.RegisterType((*Response)(nil), "demo.Response")
}

func init() { proto.RegisterFile("demo.proto", fileDescriptor_ca53982754088a9d) }

var fileDescriptor_ca53982754088a9d = []byte{
	// 196 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0x49, 0xcd, 0xcd,
	0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x01, 0xb1, 0x95, 0x8c, 0xb9, 0xd8, 0x83, 0x52,
	0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x04, 0xb8, 0x98, 0x9d, 0x33, 0x53, 0x24, 0x18, 0x15, 0x18,
	0x35, 0x98, 0x83, 0x40, 0x4c, 0x21, 0x31, 0x2e, 0xb6, 0xa0, 0xd4, 0x42, 0xdf, 0xe2, 0x74, 0x09,
	0x26, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x28, 0x4f, 0xc9, 0x8c, 0x8b, 0x23, 0x28, 0xb5, 0xb8, 0x20,
	0x3f, 0xaf, 0x38, 0x15, 0xa4, 0x2b, 0x18, 0xa1, 0x2b, 0x38, 0x33, 0x45, 0x48, 0x02, 0x64, 0x64,
	0x71, 0x01, 0x42, 0x1b, 0x8c, 0x6b, 0x74, 0x96, 0x91, 0x8b, 0xc3, 0x3d, 0x28, 0xc0, 0xd9, 0x25,
	0x35, 0x37, 0x5f, 0x48, 0x97, 0x8b, 0x27, 0x38, 0x33, 0xb7, 0x20, 0x27, 0xd5, 0x37, 0xb5, 0x24,
	0x23, 0x3f, 0x45, 0x88, 0x57, 0x0f, 0xec, 0x38, 0xa8, 0x6b, 0xa4, 0xf8, 0x60, 0x5c, 0xa8, 0x3d,
	0x06, 0x5c, 0xbc, 0xce, 0xc1, 0x25, 0x45, 0xa9, 0x89, 0xb9, 0x44, 0xa9, 0xd7, 0x60, 0x04, 0xe9,
	0x08, 0x26, 0x41, 0x87, 0x01, 0xa3, 0x90, 0x1e, 0x17, 0x67, 0x48, 0xb8, 0x1b, 0x91, 0xe6, 0x1b,
	0x30, 0x26, 0xb1, 0x81, 0x43, 0xd2, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x85, 0xf2, 0xe5, 0xe5,
	0x57, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GRPCDemoClient is the client API for GRPCDemo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GRPCDemoClient interface {
	// 简单模式
	SimpleMethod(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// 客户端流模式（客户端发送stream）
	CStreamMethod(ctx context.Context, opts ...grpc.CallOption) (GRPCDemo_CStreamMethodClient, error)
	// 服务端流模式（从服务端返回stream）
	SStreamMethod(ctx context.Context, in *Request, opts ...grpc.CallOption) (GRPCDemo_SStreamMethodClient, error)
	// 双向流模式
	TWFMethod(ctx context.Context, opts ...grpc.CallOption) (GRPCDemo_TWFMethodClient, error)
}

type gRPCDemoClient struct {
	cc *grpc.ClientConn
}

func NewGRPCDemoClient(cc *grpc.ClientConn) GRPCDemoClient {
	return &gRPCDemoClient{cc}
}

func (c *gRPCDemoClient) SimpleMethod(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/demo.GRPCDemo/SimpleMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCDemoClient) CStreamMethod(ctx context.Context, opts ...grpc.CallOption) (GRPCDemo_CStreamMethodClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GRPCDemo_serviceDesc.Streams[0], "/demo.GRPCDemo/CStreamMethod", opts...)
	if err != nil {
		return nil, err
	}
	x := &gRPCDemoCStreamMethodClient{stream}
	return x, nil
}

type GRPCDemo_CStreamMethodClient interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type gRPCDemoCStreamMethodClient struct {
	grpc.ClientStream
}

func (x *gRPCDemoCStreamMethodClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gRPCDemoCStreamMethodClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gRPCDemoClient) SStreamMethod(ctx context.Context, in *Request, opts ...grpc.CallOption) (GRPCDemo_SStreamMethodClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GRPCDemo_serviceDesc.Streams[1], "/demo.GRPCDemo/SStreamMethod", opts...)
	if err != nil {
		return nil, err
	}
	x := &gRPCDemoSStreamMethodClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GRPCDemo_SStreamMethodClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type gRPCDemoSStreamMethodClient struct {
	grpc.ClientStream
}

func (x *gRPCDemoSStreamMethodClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gRPCDemoClient) TWFMethod(ctx context.Context, opts ...grpc.CallOption) (GRPCDemo_TWFMethodClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GRPCDemo_serviceDesc.Streams[2], "/demo.GRPCDemo/TWFMethod", opts...)
	if err != nil {
		return nil, err
	}
	x := &gRPCDemoTWFMethodClient{stream}
	return x, nil
}

type GRPCDemo_TWFMethodClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type gRPCDemoTWFMethodClient struct {
	grpc.ClientStream
}

func (x *gRPCDemoTWFMethodClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gRPCDemoTWFMethodClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GRPCDemoServer is the server API for GRPCDemo service.
type GRPCDemoServer interface {
	// 简单模式
	SimpleMethod(context.Context, *Request) (*Response, error)
	// 客户端流模式（客户端发送stream）
	CStreamMethod(GRPCDemo_CStreamMethodServer) error
	// 服务端流模式（从服务端返回stream）
	SStreamMethod(*Request, GRPCDemo_SStreamMethodServer) error
	// 双向流模式
	TWFMethod(GRPCDemo_TWFMethodServer) error
}

// UnimplementedGRPCDemoServer can be embedded to have forward compatible implementations.
type UnimplementedGRPCDemoServer struct {
}

func (*UnimplementedGRPCDemoServer) SimpleMethod(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimpleMethod not implemented")
}
func (*UnimplementedGRPCDemoServer) CStreamMethod(srv GRPCDemo_CStreamMethodServer) error {
	return status.Errorf(codes.Unimplemented, "method CStreamMethod not implemented")
}
func (*UnimplementedGRPCDemoServer) SStreamMethod(req *Request, srv GRPCDemo_SStreamMethodServer) error {
	return status.Errorf(codes.Unimplemented, "method SStreamMethod not implemented")
}
func (*UnimplementedGRPCDemoServer) TWFMethod(srv GRPCDemo_TWFMethodServer) error {
	return status.Errorf(codes.Unimplemented, "method TWFMethod not implemented")
}

func RegisterGRPCDemoServer(s *grpc.Server, srv GRPCDemoServer) {
	s.RegisterService(&_GRPCDemo_serviceDesc, srv)
}

func _GRPCDemo_SimpleMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCDemoServer).SimpleMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.GRPCDemo/SimpleMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCDemoServer).SimpleMethod(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCDemo_CStreamMethod_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GRPCDemoServer).CStreamMethod(&gRPCDemoCStreamMethodServer{stream})
}

type GRPCDemo_CStreamMethodServer interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type gRPCDemoCStreamMethodServer struct {
	grpc.ServerStream
}

func (x *gRPCDemoCStreamMethodServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gRPCDemoCStreamMethodServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GRPCDemo_SStreamMethod_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GRPCDemoServer).SStreamMethod(m, &gRPCDemoSStreamMethodServer{stream})
}

type GRPCDemo_SStreamMethodServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type gRPCDemoSStreamMethodServer struct {
	grpc.ServerStream
}

func (x *gRPCDemoSStreamMethodServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func _GRPCDemo_TWFMethod_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GRPCDemoServer).TWFMethod(&gRPCDemoTWFMethodServer{stream})
}

type GRPCDemo_TWFMethodServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type gRPCDemoTWFMethodServer struct {
	grpc.ServerStream
}

func (x *gRPCDemoTWFMethodServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gRPCDemoTWFMethodServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _GRPCDemo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "demo.GRPCDemo",
	HandlerType: (*GRPCDemoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SimpleMethod",
			Handler:    _GRPCDemo_SimpleMethod_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CStreamMethod",
			Handler:       _GRPCDemo_CStreamMethod_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SStreamMethod",
			Handler:       _GRPCDemo_SStreamMethod_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TWFMethod",
			Handler:       _GRPCDemo_TWFMethod_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "demo.proto",
}
